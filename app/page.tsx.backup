'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { supabase } from '@/lib/supabaseClient';
import LikeButton from './LikeButton';
import SaveButton from './SaveButton';
import RedeemModalLauncher from '@/app/redeem/RedeemModalLauncher';
import { useRouter } from 'next/navigation';

type CardTier = 'shortlist' | 'founding_shortlist' | 'ambassador';

type Perk = {
  id: string;
  title: string;
  description: string | null;
  starts_at: string | null;
  ends_at: string | null;
  is_sponsored: boolean | null;
  tags: string[] | null;
  required_card_tier: CardTier;
  active?: boolean | null;

  business_name?: string | null;
  business_logo_url?: string | null;
  image_url?: string | null;

  viewer_has_liked?: boolean;
  viewer_has_saved?: boolean;

  like_count?: number;
};

// Helper to display tier names nicely
const tierDisplay: Record<CardTier, string> = {
  shortlist: 'Shortlist',
  founding_shortlist: 'Founding Shortlist',
  ambassador: 'Ambassador'
};

export default function FeedPage() {
  const router = useRouter();
  const [session, setSession] = useState<any>(null);
  const [userRole, setUserRole] = useState<'admin' | 'member' | null>(null);
  const [cardTier, setCardTier] = useState<CardTier | null>(null);
  const [perks, setPerks] = useState<Perk[]>([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      setLoading(true);
      setErr(null);

      const { data: { session }, error: sessErr } = await supabase.auth.getSession();
      if (sessErr) setErr(sessErr.message);
      
      // Redirect logged-out users to branded login page
      if (!session) {
        router.push('/login');
        return;
      }
      
      setSession(session);

      // Run in parallel for speed
      const cardsQ = supabase
        .from('Cards')
        .select('tier, status')
        .eq('user_id', session.user.id)
        .eq('status', 'active')
        .maybeSingle();

      const roleQ = supabase
        .from('Users')
        .select('role')
        .eq('email', session.user.email as string)
        .maybeSingle();

      const perksQ = supabase.rpc('eligible_perks', { feed_limit: 50 });

      const [
        { data: card },
        { data: roleRow, error: roleErr },
        { data: rpcData, error: rpcErr }
      ] = await Promise.all([cardsQ, roleQ, perksQ]);

      if (card?.tier) setCardTier(card.tier as CardTier);
      setUserRole(roleErr ? 'member' : ((roleRow?.role as 'admin' | 'member' | null) ?? 'member'));

      let basePerks: Perk[] = [];
      if (rpcErr) {
        const { data: perkData, error: perkErr } = await supabase
          .from('Perks')
          .select('id,title,description,starts_at,ends_at,is_sponsored,tags,required_card_tier,active,image_url')
          .eq('active', true)
          .order('starts_at', { ascending: false })
          .limit(50);
        if (perkErr) setErr(perkErr.message);
        basePerks = (perkData as Perk[]) ?? [];
      } else {
        basePerks = (rpcData as Perk[]) ?? [];
      }

      // Fetch viewer's likes and saves
      if (basePerks.length > 0) {
        const ids = basePerks.map(p => p.id);
        
        const { data: userLikes, error: likeErr } = await supabase
          .from('perk_likes')
          .select('perk_id')
          .eq('user_id', session.user.id)
          .in('perk_id', ids);

        const { data: userSaves, error: saveErr } = await supabase
          .from('saved_perks')
          .select('perk_id')
          .eq('user_id', session.user.id)
          .in('perk_id', ids);

        if (likeErr) console.warn('[feed] like fetch error', likeErr);
        if (saveErr) console.warn('[feed] save fetch error', saveErr);

        const likedSet = new Set((userLikes ?? []).map(r => r.perk_id as string));
        const savedSet = new Set((userSaves ?? []).map(r => r.perk_id as string));
        
        setPerks(basePerks.map(p => ({ 
          ...p, 
          viewer_has_liked: likedSet.has(p.id),
          viewer_has_saved: savedSet.has(p.id)
        })));
      } else {
        setPerks(basePerks);
      }

      setLoading(false);
    })();
  }, [router]);

  // Show nothing while redirecting
  if (!session) {
    return null;
  }

  return (
    <main className="min-h-screen bg-[#0B0F14] pb-24">
      {/* Header */}
      <div className="sticky top-0 z-20 bg-[#0B0F14]/90 backdrop-blur border-b border-[#161B22]">
        <div className="max-w-2xl mx-auto px-4 py-3 flex items-center gap-3">
          <div className="flex-1">
            <h1 className="text-lg font-semibold text-[#F8FAFC]">Perks for you</h1>
            {cardTier && (
              <span className="inline-flex items-center mt-1 px-2 py-0.5 rounded-full border border-[#E6B34D]/30 text-xs text-[#E6B34D]">
                {tierDisplay[cardTier]}
              </span>
            )}
          </div>

          {userRole === 'admin' && (
            <Link
              href="/admin/perks/new"
              className="px-3 py-1.5 rounded-lg bg-violet-500/20 text-violet-500 text-sm font-medium hover:bg-violet-500/30 transition-colors"
            >
              + New Perk
            </Link>
          )}
        </div>
      </div>

      {err && (
        <div className="max-w-2xl mx-auto px-4 pt-4">
          <p className="text-red-400 text-sm">{err}</p>
        </div>
      )}

      {loading ? (
        <div className="max-w-2xl mx-auto px-4 pt-6 space-y-6">
          {[1, 2].map(i => (
            <div key={i} className="animate-pulse rounded-[14px] bg-[#0F1217] h-[400px]" />
          ))}
        </div>
      ) : perks.length === 0 ? (
        <div className="max-w-2xl mx-auto px-4 pt-12 text-center">
          <p className="text-[#9AA4B2]">No perks available right now.</p>
          <p className="text-[#9AA4B2] text-sm mt-2">Check back soon for exclusive offers!</p>
        </div>
      ) : (
        <div className="max-w-2xl mx-auto px-4 pt-6 space-y-6">
          {perks.map((p) => (
            <article
              key={p.id}
              className="rounded-[14px] bg-[#0F1217] border border-[#161B22] overflow-hidden shadow-[0_6px_24px_rgba(0,0,0,0.24)]"
            >
              {/* Business Header */}
              <div className="flex items-center gap-2 px-3 py-2.5 border-b border-[#161B22]">
                {p.business_logo_url ? (
                  <Image
                    src={p.business_logo_url}
                    alt=""
                    width={32}
                    height={32}
                    className="w-8 h-8 rounded-full object-cover"
                  />
                ) : (
                  <div className="w-8 h-8 rounded-full bg-[#161B22]" />
                )}
                <div className="flex-1 min-w-0">
                  <div className="text-sm font-semibold text-[#F8FAFC] truncate">
                    {p.business_name ?? 'Local Business'}
                  </div>
                </div>
                {p.is_sponsored && (
                  <span className="text-[11px] uppercase text-[#9AA4B2] tracking-wide">Sponsored</span>
                )}
              </div>

              {/* Image with Overlay Text */}
              {p.image_url && (
                <div className="relative">
                  <Image
                    src={p.image_url}
                    alt={p.title}
                    width={800}
                    height={600}
                    className="w-full aspect-[4/3] object-cover"
                  />
                  {/* Bottom scrim */}
                  <div className="absolute inset-x-0 bottom-0 h-[42%] bg-gradient-to-t from-black/80 to-transparent" />
                  {/* Title on image */}
                  <div className="absolute left-3 right-3 bottom-3">
                    <h3 className="font-semibold text-[20px] leading-[22px] text-white">
                      {p.title}
                    </h3>
                    {p.description && (
                      <p className="text-sm text-white/85 mt-1 line-clamp-2">
                        {p.description}
                      </p>
                    )}
                  </div>
                </div>
              )}

              {/* No image fallback */}
              {!p.image_url && (
                <div className="p-4">
                  <h3 className="font-semibold text-xl text-[#F8FAFC]">{p.title}</h3>
                  {p.description && (
                    <p className="text-[#9AA4B2] mt-1">{p.description}</p>
                  )}
                </div>
              )}

              {/* Actions Row */}
              <div className="flex items-center gap-2 px-3 py-2.5 border-t border-[#161B22]">
                <LikeButton
                  perkId={p.id}
                  userId={session.user.id}
                  initialLiked={!!p.viewer_has_liked}
                  onResult={(liked) => {
                    setPerks(prev =>
                      prev.map(row =>
                        row.id === p.id ? { ...row, viewer_has_liked: liked } : row
                      )
                    );
                  }}
                />
                <SaveButton
                  perkId={p.id}
                  userId={session.user.id}
                  initialSaved={!!p.viewer_has_saved}
                  onResult={(saved) => {
                    setPerks(prev =>
                      prev.map(row =>
                        row.id === p.id ? { ...row, viewer_has_saved: saved } : row
                      )
                    );
                  }}
                />
                <div className="flex-1" />
                <RedeemModalLauncher perkId={p.id} />
              </div>

              {/* Meta Row */}
              <div className="px-3 pb-3 text-xs text-[#9AA4B2]">
                Required: <span className="text-[#F8FAFC]">{tierDisplay[p.required_card_tier]}</span>
                {p.starts_at && (
                  <span className="ml-2">
                    · Starts {new Date(p.starts_at).toLocaleDateString()}
                  </span>
                )}
                {p.ends_at && (
                  <span className="ml-2">
                    · Ends {new Date(p.ends_at).toLocaleDateString()}
                  </span>
                )}
              </div>
            </article>
          ))}
        </div>
      )}
    </main>
  );
}
